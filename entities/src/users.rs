//! `SeaORM` Entity, @generated by sea-orm-codegen 1.0.0

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "users")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub username: String,
    pub password_hash: String,
    pub active: bool,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::users_adverts::Entity")]
    UsersAdverts,
    #[sea_orm(has_many = "super::users_groups::Entity")]
    UsersGroups,
}

impl Related<super::users_adverts::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UsersAdverts.def()
    }
}

impl Related<super::users_groups::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UsersGroups.def()
    }
}

impl Related<super::adverts::Entity> for Entity {
    fn to() -> RelationDef {
        super::users_adverts::Relation::Adverts.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::users_adverts::Relation::Users.def().rev())
    }
}

impl Related<super::groups::Entity> for Entity {
    fn to() -> RelationDef {
        super::users_groups::Relation::Groups.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::users_groups::Relation::Users.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
